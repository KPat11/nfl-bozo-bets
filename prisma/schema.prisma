generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(cuid())
  email           String      @unique
  name            String
  phone           String?
  teamId          String?
  password        String      @default("") // Hashed password for authentication
  totalBozos      Int         @default(0)
  totalHits       Int         @default(0)
  totalFavMisses  Int         @default(0) // New: misses for favorite picks
  isBiggestBozo   Boolean     @default(false)
  isAdmin         Boolean     @default(false)
  managementWeek  Int?        // Week when user has BIGGEST BOZO privileges
  managementSeason Int?       // Season when user has BIGGEST BOZO privileges
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  bozoStats       BozoStat[]
  payments        Payment[]
  team            Team?       @relation(fields: [teamId], references: [id])
  weeklyBets      WeeklyBet[]
  managedBets     BetManagement[] @relation("ManagedBets")
  ledTeams        Team[]      @relation("TeamBiggestBozo")
  sessions        Session[]   // Authentication sessions
  passwordResets  PasswordReset[] // Password reset tokens

  @@map("users")
}

model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  biggestBozoId String?  // Current BIGGEST BOZO
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         User[]
  biggestBozo   User?    @relation("TeamBiggestBozo", fields: [biggestBozoId], references: [id])

  @@map("teams")
}

model WeeklyBet {
  id        String     @id @default(cuid())
  userId    String
  week      Int
  season    Int
  prop      String
  odds      Float?
  fanduelId String?
  status    PropStatus @default(PENDING)
  betType   BetType    @default(BOZO)
  paid      Boolean    @default(false) // Payment status
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  payments  Payment[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  management BetManagement[]

  @@unique([userId, week, season, betType])
  @@map("weekly_bets")
}

model Payment {
  id          String        @id @default(cuid())
  userId      String
  weeklyBetId String
  amount      Float
  status      PaymentStatus @default(PENDING)
  method      String?
  paidAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  weeklyBet   WeeklyBet     @relation(fields: [weeklyBetId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  sent      Boolean          @default(false)
  sentAt    DateTime?
  createdAt DateTime         @default(now())

  @@map("notifications")
}

model FanduelProp {
  id        String     @id @default(cuid())
  fanduelId String     @unique
  player    String
  team      String
  prop      String
  line      Float
  odds      Float
  overOdds  Float?
  underOdds Float?
  week      Int
  season    Int
  gameTime  DateTime
  status    PropStatus @default(PENDING)
  result    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("fanduel_props")
}

model BozoStat {
  id            String   @id @default(cuid())
  userId        String
  week          Int
  season        Int
  isBiggestBozo Boolean  @default(false)
  odds          Float?
  prop          String
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, week, season])
  @@map("bozo_stats")
}

model BetManagement {
  id            String   @id @default(cuid())
  weeklyBetId   String
  managerId     String
  week          Int
  season        Int
  action        ManagementAction
  reason        String?
  createdAt     DateTime @default(now())
  weeklyBet     WeeklyBet @relation(fields: [weeklyBetId], references: [id], onDelete: Cascade)
  manager       User     @relation("ManagedBets", fields: [managerId], references: [id], onDelete: Cascade)

  @@unique([weeklyBetId, managerId, week, season])
  @@map("bet_management")
}

enum PropStatus {
  PENDING
  HIT
  BOZO
  PUSH
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum NotificationType {
  PAYMENT_REMINDER
  PROP_RESULT
  WEEKLY_REMINDER
  SYSTEM
}

enum BetType {
  BOZO
  FAVORITE
}

enum ManagementAction {
  MARK_HIT
  MARK_BOZO
  MARK_PUSH
  MARK_CANCELLED
  OVERRIDE_STATUS
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}
