generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String
  phone      String?
  teamId     String?
  totalBozos Int         @default(0)
  totalHits  Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  bozoStats  BozoStat[]
  payments   Payment[]
  team       Team?       @relation(fields: [teamId], references: [id])
  weeklyBets WeeklyBet[]

  @@map("users")
}

model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("teams")
}

model WeeklyBet {
  id        String     @id @default(cuid())
  userId    String
  week      Int
  season    Int
  prop      String
  odds      Float?
  fanduelId String?
  status    PropStatus @default(PENDING)
  betType   BetType    @default(BOZO)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  payments  Payment[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, week, season, betType])
  @@map("weekly_bets")
}

model Payment {
  id          String        @id @default(cuid())
  userId      String
  weeklyBetId String
  amount      Float
  status      PaymentStatus @default(PENDING)
  method      String?
  paidAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  weeklyBet   WeeklyBet     @relation(fields: [weeklyBetId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  sent      Boolean          @default(false)
  sentAt    DateTime?
  createdAt DateTime         @default(now())

  @@map("notifications")
}

model FanduelProp {
  id        String     @id @default(cuid())
  fanduelId String     @unique
  player    String
  team      String
  prop      String
  line      Float
  odds      Float
  overOdds  Float?
  underOdds Float?
  week      Int
  season    Int
  gameTime  DateTime
  status    PropStatus @default(PENDING)
  result    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("fanduel_props")
}

model BozoStat {
  id            String   @id @default(cuid())
  userId        String
  week          Int
  season        Int
  isBiggestBozo Boolean  @default(false)
  odds          Float?
  prop          String
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, week, season])
  @@map("bozo_stats")
}

enum PropStatus {
  PENDING
  HIT
  BOZO
  PUSH
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum NotificationType {
  PAYMENT_REMINDER
  PROP_RESULT
  WEEKLY_REMINDER
  SYSTEM
}

enum BetType {
  BOZO
  FAVORITE
}
