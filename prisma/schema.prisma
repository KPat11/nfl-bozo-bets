// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  weeklyBets WeeklyBet[]
  payments   Payment[]

  @@map("users")
}

model WeeklyBet {
  id          String   @id @default(cuid())
  userId      String
  week        Int
  season      Int
  prop        String
  odds        Float?
  fanduelId   String?  // FanDuel prop ID for tracking
  status      PropStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments    Payment[]

  @@unique([userId, week, season])
  @@map("weekly_bets")
}

model Payment {
  id          String      @id @default(cuid())
  userId      String
  weeklyBetId String
  amount      Float
  status      PaymentStatus @default(PENDING)
  method      String?     // "venmo", "paypal", "cash", etc.
  paidAt      DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  weeklyBet   WeeklyBet   @relation(fields: [weeklyBetId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        NotificationType
  message     String
  sent        Boolean  @default(false)
  sentAt      DateTime?
  createdAt   DateTime @default(now())

  @@map("notifications")
}

model FanduelProp {
  id          String   @id @default(cuid())
  fanduelId   String   @unique
  player      String
  team        String
  prop        String
  line        Float
  odds        Float
  overOdds    Float?
  underOdds   Float?
  week        Int
  season      Int
  gameTime    DateTime
  status      PropStatus @default(PENDING)
  result      String?  // "over", "under", "push"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("fanduel_props")
}

enum PropStatus {
  PENDING
  HIT
  BOZO
  PUSH
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum NotificationType {
  PAYMENT_REMINDER
  PROP_RESULT
  WEEKLY_REMINDER
  SYSTEM
}
